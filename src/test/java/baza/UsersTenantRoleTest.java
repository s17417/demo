package baza;

import static org.junit.Assert.assertTrue;

import javax.validation.constraints.AssertTrue;

import org.junit.Assert;
import org.junit.jupiter.api.Test;

import base.Model.baza.Role;
import base.Model.baza.Tenant;
import base.Model.baza.Users;
import base.Model.baza.UsersTenantRole;

public class UsersTenantRoleTest {

	@Test
	public void testBidirectionalUserTenantRole_User() {
		Users u = new Users();
		Users u1=new Users();
		u1.setLogin("u1");
		Tenant t=new Tenant();
		Tenant t1=new Tenant();
		t1.setName("t1");
		UsersTenantRole usr= new UsersTenantRole(u,t, Role.BASIC_USER);
		
		Assert.assertTrue(usr.getTenant().equals(t));
		Assert.assertTrue(usr.getUser().equals(u));
		
		usr.setTenant(null);
		Assert.assertTrue(!t.getUsersTenantRole().contains(usr));
		Assert.assertTrue(usr.getTenant()==null);
		
		usr.setUser(null);
		Assert.assertTrue(!u.getUsersTenantRole().contains(usr));
		Assert.assertTrue(usr.getUser()==null);
		
		usr.setTenant(t);
		Assert.assertTrue(usr.getTenant().equals(t)&&t.getUsersTenantRole().contains(usr));
		
		usr.setUser(u);
		Assert.assertTrue(usr.getUser().equals(u)&&u.getUsersTenantRole().contains(usr));
		
		usr.setTenant(t1);
		Assert.assertTrue(usr.getTenant().equals(t1)&&t1.getUsersTenantRole().contains(usr)&&!t.getUsersTenantRole().contains(usr));
		
		usr.setUser(u1);
		Assert.assertTrue(usr.getUser().equals(u1)&&u1.getUsersTenantRole().contains(usr)&&!u.getUsersTenantRole().contains(usr));
		
		u1.removeTenant(t1);
		Assert.assertTrue(!u1.getUsersTenantRole().stream().anyMatch(e -> e.getTenant().equals(t1))&&!t1.getUsersTenantRole().stream().anyMatch( e-> e.getUser().equals(u1)));
		
		usr.setTenant(t1);
		usr.setUser(u1);
		t1.removeUser(u1);
		Assert.assertTrue(!t1.getUsersTenantRole().stream().anyMatch(e -> e.getUser().equals(u1))&&!t1.getUsersTenantRole().stream().anyMatch( e-> e.getUser().equals(u1)));
	
	}
	
	/**
	 * additionally checks equality of superClass, needed for ORM's due to use of proxy-objects
	 * identity based on objects Id's not a bussines key. Id generated by UUID
	 */
	@Test
	public void testEqualityOfObjects() {
		Users u1=new Users();
		Users u2=new Users();
		
		Tenant t1=new Tenant();
		Tenant t2= new Tenant();
		
		Assert.assertTrue(!u1.equals(u2));
		Assert.assertTrue(!t1.equals(t2));
		
		u2.setId(u1.getId());
		t2.setId(t1.getId());
		Assert.assertTrue(u1.equals(u2));
		Assert.assertTrue(t1.equals(t2));
		
		t2.setId(u2.getId());
		Assert.assertTrue(t2.equals(u2)); //checks equality of superClass, needed for ORM's due to use of proxy-objects
	}
}
